"use client"

import * as React from "react"
import { useFormContext } from "react-hook-form"

import { cn } from "@/lib/utils"

const Form = React.forwardRef<HTMLFormElement, React.ComponentPropsWithoutRef<"form">>(
  ({ className, ...props }, ref) => {
    return (
      <form ref={ref} className={cn("space-y-8", className)} {...props} />
    )
  }
)
Form.displayName = "Form"

const FormControl = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return <div ref={ref} className={cn("relative", className)} {...props} />
})
FormControl.displayName = "FormControl"

const FormLabel = React.forwardRef<
  React.ElementRef<"label">,
  React.ComponentPropsWithoutRef<"label">
>(({ className, ...props }, ref) => {
  return (
    <label
      ref={ref}
      className={cn(
        "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
        className
      )}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormDescription = React.forwardRef<
  React.ElementRef<"p">,
  React.ComponentPropsWithoutRef<"p">
>(({ className, ...props }, ref) => {
  return (
    <p
      ref={ref}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  React.ElementRef<"p">,
  React.ComponentPropsWithoutRef<"p">
>(({ className, ...props }, ref) => {
  const { formState } = useFormContext()

  const errorMessages = formState.errors

  return (
    <p
      ref={ref}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    />
  )
})
FormMessage.displayName = "FormMessage"

const FormItem = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => {
  return <div ref={ref} className={cn("space-y-2", className)} {...props} />
})
FormItem.displayName = "FormItem"

const FormField = React.forwardRef<
  React.ElementRef<"div">,
  {
    control: any
    name: string
    render: (props: any) => React.ReactNode
  } & React.ComponentPropsWithoutRef<"div">
>(({ control, name, render, ...props }, ref) => {
  return (
    <div>
      {render({
        field: {
          ...control.register(name),
          value: control._getFieldState(name).value,
          onChange: (e: any) => {
            control.setValue(name, e.target.value)
          },
        },
        formState: control.formState,
      })}
    </div>
  )
})
FormField.displayName = "FormField"

export {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
}
